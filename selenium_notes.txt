*To access any method in another class we need to create that object of the class.

//////////contains keyword of xpath and css selector//////////////////
xpath:
//*[contains(@id,'ema')]
cssSelector:
[name*='pas']


///////////sibling and parent concept/////////////////////
By.xpath("//div[@class='placeholder']/following-sibling::input")
By.xpath("//div[@class='placeholder']/parent::div")


////////////////cssSelector///////////////////
#id
.class
10times faster than xpath


////////////////dynamic dropdown/////////////////
(//a[@value='MAA'])[2]--if element path is same 
//div[@id='glsctl00_mainContent_ddl_destinationStation1_CTNR'] //a[@value='MAA']--parent child relationship
*coumpound class names with space replaced with (.)

////////////////assertions////////////

Assert.assertFalse(Boolean_value)------it accept false boolean value if not test is failed

Assert.assertTrue(Boolean_value)------it accept true boolean value if not test is failed

Assert.assertquals(actual value,expected value)

////////////////////checking atribute value contains---///////////////////////////////
By.id("ctl00_mainContent_view_date2")).getAttribute("style").contains("0.5")


//////////////////////////code formatting////////////////////////
class should start with capital(Pascal case). ex--Newjavaclass
method,variable names should be Camel case. ex: newJavaClass

//////////////////////debug the code//////////////////////////
*To check the code line by line
*break point are used
*resume,stepover,stepin are used to continue with the code


///////////////////alerts////////////////////////
web.switchTo().alert().accept();
web.switchTo().alert().dismiss();
web.switchTo().alert().accept().getText();

//////////////////////array to arraylist convert///////////////////////

List variable_name=Arrays.asList(array_name);

*To create arraylist
ArrayList<String> original_array= new ArrayList<String>();

*collection class is used to do sort and reverse etc., on arraylist
Collections.sort(duplicateArray);
 Collections.reverse(duplicateArray);

////////////////////To split and trim the text//////////////////////////////////
String[] name=elements.get(i).getText().split("-");
String formattedName=name[0].trim();


//////////////Implicit and explicit wait////////////////////////
Implicit wait 
*Code is easy and readable.
*it is declared at globally.
*performance issues are not caught.
*web.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
*it can not wait more than 10 sec because it slow down the application test.
*5 sec is recommended to use.

Explicit wait
*code is littlebit complicated.
*it is defined at particular element to wait.
*there is no performance issue.
*WebDriverWait wait = new WebDriverWait(web, 5);
*wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".promoCode")));

Fluent wait
*It is same as explicit wait.
*It check the presence of web element at regular intervel of time.
*Fluent wait and Explicit wait are two seperate classes implements wait interface.

//////////////////Actions////////////////////////////////////////////
Actions act=new Actions(web);
		act.moveToElement(web.findElement(By.cssSelector("#nav-link-accountList"))).contextClick().build().perform();
		act.moveToElement(web.findElement(By.id("twotabsearchtextbox"))).click().keyDown(Keys.SHIFT).sendKeys("hello").doubleClick().build().perform();


*doubleClick() is used to double click;
*contextClick() is to right click on mouse
     
*act.dragAndDrop(web.findElement(Source WebElement,Target WebElement)).build().perform();

*Actions must be 'build' and 'perform' to perform action

/////////////////////////////Switch between windows/////////////////////////////////////
	Set<String> handle=web.getWindowHandles();
	Iterator<String> iterate=handle.iterator();
	   String ParentId=iterate.next();
	   String childId=iterate.next();
	   Thread.sleep(5000);
		web.switchTo().window(childId);


 while(iterate.hasNext()) {
                    	
                    	 web.switchTo().window( iterate.next());
                    	 System.out.println(web.getTitle());
                    	 
                    	 
                    	 
                     }


*To open the link in new tab syntax
                    sendKeys(Keys.chord(Keys.CONTROL,Keys.ENTER))

/////////////////////////footer link///////////////////////////////////////////////////////////
WebElement footer_links=web.findElement(By.id("gf-BIG"));

footer_links.findElements(By.tagName("a")).size()---it is used to limit the driver limit 

//////////////String to integer convert///////////////////////////////////////////

*Integer.parseInt(String variable)
*Integer to string
*IntegerToTextCoverter.toText(Integer);------------------provided by apachee poi
*Integer.toString(value).
/////////////////////////JavascriptExecutor///////////////////////////////////
*JavascriptExecutor is used to find hidden elements
*it is a javascript code executed by JavascriptExecutor class

syntax:
JavascriptExecutor java= (JavascriptExecutor)web;
		String value="return document.getElementById(\"fromPlaceName\").value;";////it is script
		String text=(String) java.executeScript(value);//here it execute and returns string

/////////////////////Screenshot/////////////////////////////////////////////////////

 * this typecast the driver and take screenshot and stores as file format
 File src=((TakesScreenshot)web).getScreenshotAs(OutputType.FILE); this typecast the driver and take screenshot and stores as file format

 *it is used to get the screenshot in local desk by creating folder
 FileUtils.copyFile(src, new File("C://users//chinni//Screenshot.png"));

/////////////////////////////SSl certifications/////////////////////////////////////////
 DesiredCapabilities ch=new DesiredCapabilities();
        ch.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
        ch.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);
        //local chrome browser
		ChromeOptions ch1=new ChromeOptions();
		
		ch1.merge(ch);
		System.setProperty("webdriver.chrome.driver", "C:\\selenium\\chromedriver.exe");
		WebDriver web = new ChromeDriver(ch1);


///////////////////// selenium grid ////////////////////////////
*java -jar grid_version.jar -role hub  ------- to the machine as hub through command prompt
*we can connect to hub through node machine command prompt only.
*java -Dwebdriver.chrome.driver="path"-jar grid_version.jar -role webdriver -hub ipaddress/grid/register -port 5555

DesiredCapabilities dc= new DesiredCapabilities();
        dc.setBrowserName("chrome");
        dc.setPlatform(Platform.WINDOWS);
        WebDriver web=new RemoteWebDriver(new URL("https://localhost:4444/wd/console"),dc);
        web.get("https://www.google.com");


//////////////////////////////TestNg///////////////////////////////////////
*TestNG is a testing framework inspired from JUnit and NUnit but introducing some new functionalities that make it more powerful and easier to use
*In XML file it has Test Suite->Test folder(module or shell)->Test classes 
*exclude is used to remove a method from execution.
  <exclude name="method_name"/>
*name.* is used to remove a any method of same name of first word from execution.
*Include is used include a perticular method to execute.
  <include name="method_name"/>

Anatotions
@BeforeSuite
@BeforeTest
@BeforeClass
f@BeforeMethod
@AfterSuite
@AfterTest
@AfterClass
@AfterMethod
------------groups--------
*groups is used to group and run the test cases
---in class 
*in xml file
<groups>
<run>
<include name="lead"/>
</run>
</groups>

----------depends---------
*if any method to run before another method
*@Test(dependsOnMethods= {"staff"})
--------------enabled-------
enabled=false to skip that test case.
@Test(enabled=false)

------------------parameter-----------------------
<parameter name="website" value="google.com"/>----in xml file may be after suite or after test folder
@Parameters({"website","key"})
	@Test
	public void staff(String website, String keys) 

-------------------------dataprovider--------------------------------
@Test(dataProvider="dataset")
	public void Vicechairman(String user,String password)
@DataProvider
	public Object dataset(){
		
		Object[][] data=new Object[3][2];
		data[0][0]= "nani";
		data[0][1]= "1234";
		data[1][0]= "hemanth";
		data[1][1]= "123";
		data[2][0]="reddy";
		data[2][1]= "321";
		return data;
		}
*Test can be run parallel="test" or parallel is "class"with thread-count
*listeners are used to executed after the test cases
              *Types of listeners are
OnStart- OnStart method is called when any Test starts.
onTestSuccess- onTestSuccess method is called on the success of any Test.
onTestFailure- onTestFailure method is called on the failure of any Test.
onTestSkipped- onTestSkipped method is called on skipped of any Test.
onTestFailedButWithinSuccessPercentage- method is called each time Test fails but is within success percentage.
onFinish- onFinish method is called after all Tests are executed.
////////////////////////////Maven////////////////////////////////////////////////////////
*Download Maven.
*Set Path in environment variable.
*pom file is used to run test cases.
*we need to provide dependencies to pom file to download the jar file and keep in m2 folder in your workspace.
*we can run through command prompt.
*mvn clean to clean the workspace.
*mvn compile to compile the project
*mvn test.
*we can also provide profile to run alternate code.
*mvn test -P(profile name).
*mvn test -Dbrowser=chrome-----parameter through command.

command used to create maven project through command prompt 
*mvn archetype:generate -DgroupId=Name -DartifactId=Name -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=flase
*cd to artifactId name and type mvn eclipse:eclipse and import the project in eclipse.

////////////////////////////////////Jenkins/////////////////////////////////////////////
*It is to compile and execute the script or code automatically.
*we can also provide time at which u want to run the code.
*U need to download the jenkin and run with java -jar jenkins.jar --httpPort=8080
*Need to go to local server.
*Place the project in jenkins folder.
*$(JENKINS_HOME)/Project name  as directory.
*after 
///////////////////////////Data Driven through excel/////////////////////

*Apachi poi API provide Data Driven through excel
*Apachi ooxml, Apachi poi two jars are used
///////////////////////////////////////Log4j////////////////////////////////////////
*Log4j is reliable,fast and flexible logging framework(API'S) written in java distributed by apache software license.
*This jar is used to log the information about the execution 
*It is used to log errors or debug information and fatal errors into console or seperate file.

*private static final Logger log1=  LogManager.getLogger(Demo1.class);
*we want to define configuaration file(log4j2.xml file) for logging the defects.
*Appender tag is used where to log and how to log the information.
*Loggers tag is uesd to what to log.

//////////////////////////////////Page Object Model////////////////////////////////////////
*Page Object Model is design pattern where webpages are defined as a classes and elements are defined as variables on the class.
*Easy to maintain.
*Easy readability of scripts.
*Reduce or eliminate duplicacy.
*Re-usuability of code.
*Reliability.


//////////////////////////////encapsulation & Extend & interface & Static///////////////////////////////////////

*It means hiding the data implementation by restricting access only to its accessable public methods.

*Here variables are declared as private and methods are declared as a public to access the variables.

*Extend to used to get methods to parent to child class.

*Interface is a class where method are declared with empty body.

*Any classes can implements those methods present in Interface. 

*Static variable is stored in heap section and its saves memory and it is used throughout the execution.
*Static variable is not used for parallel test running.

///////////////////////////No need to hard code//////////////////////////////////////

*system.getProperty("user.dir") is used to get system containing folder path.

*system.setProperty("value holder","value")---to set the property.

*fileoutputstream is used to write the file.
prop.store(fileoutputstream object)

*Extend report and listener is location is given in testng listeners tag.

*Any resources you want to execute while running we will define it path in resource tag in pom file

/////////////////////////////////git/////////////////////////////////////////

*Install git in your local mission
*Need github account.
*Atlassian git commands link has git commands.

////////////////////////////////////////Database connection////////////////////////////////

*Install sql database.
String url="jdbc:mysql://localhost:3306/nani";
	//Class.forName("com.mysql.jdbc.Driver");
	Connection connect=DriverManager.getConnection(url,"root","Hemanth143");----------connect to the sql database.
	
	Statement s=connect.createStatement();-------------statements to send to get queary
	ResultSet result=s.executeQuery("select * from employeeinfo where name='hemanth';");------------result stored in result object.
	result.next();
	System.out.println(result.getString("name"));
	System.out.println(result.getString("location"));
	
	
	
Part 2
//button[text()='ADD TO CART']--xpath by text
//tr[@class='rb-monthHeader']--by class name

tr[id=""]

# shortcut for id in css selector

. shortcut for class in css selector

//button[contains(text(),'PROCEED TO ')]--contains keyword

element.sendKeys(Keys.ENTER);--to send keys through send keys command

web.manage().deleteAllCookies();--to delete cookies before opening and website
web.manage().deleteCookieNamed("coolieName");--to delete specific cookie

Actions action= new Actions(web);--Actions class
action.moveToElement(web.findElement(By.xpath("//span[@class='nav-line-2']"))).contextClick().build().perform()--contextclick means right click

web.switchTo().frame(0);--frame

Select sel=new Select(web.findElement(By.id("ctl00_mainContent_ddl_Adult")));--select from drop downs
sel.selectByIndex(3);


*Implicit wait
web.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);--implicit wait

*Explicit wait
WebDriverWait wait = new WebDriverWait(web, 5);
wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".promoCode")));

*Alert
web.switchTo().alert().accept();
web.switchTo().alert().getText().contains("nani")

**Excel
FileInputStream file = new FileInputStream("C://Users//chinni//Desktop//login_details.xlsx");
XSSFWorkbook excel = new XSSFWorkbook(file);
XSSFSheet sheet = excel.getSheetAt(i);
Iterator<Row> row = sheet.iterator();
Row first = row.next();
Iterator<Cell> c = first.cellIterator();

**JavaScript executor
JavascriptExecutor java= (JavascriptExecutor)web;
		String value="return document.getElementById(\"fromPlaceName\").value;";
		String text=(String) java.executeScript(value);

**Screenshot
File src=((TakesScreenshot)web).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(src, new File("C://users//chinni//Screenshot.png"));

**SeleniumGrid
DesiredCapabilities dc= new DesiredCapabilities();
		dc.setBrowserName("chrome");
        dc.setPlatform(Platform.WINDOWS);
        WebDriver web=new RemoteWebDriver(new URL("https://localhost:4444/wd/console"),dc);


**Collection sort & reverse
Collections.sort(duplicateArray);
	    Collections.reverse(duplicateArray);

*Assert.assertEquals(original_array,duplicateArray,"array are not equal");

*Sibling element (By.xpath("(//div[text()='Extras'])[1]/following-sibling::div[1]")

**Logger
private static final Logger log1=  LogManager.getLogger(Demo1.class);
log1.debug, fatal, info, error



Forward Traversing
//table/tbody/tr[2]/td[2]

Backward Traversing
//td[text()=’Unix’]/../../..

child to parent and to sibbling node(Independent to parent to dependent)
//td[text()=’Java’]/../td[3]
//td[text()=’Ruby’]/..//a[text()=’Download’]
//a[text()='Billable']/..//a[text()='set by default'

Xpath By Group Index
(//div[@class=’popup_menu_arrow’])[3]]
//a – Matches with all the links present in the entire web page
//a[1]- Matches with all the first link
(//a)[1] – Matches with only the first link
(//input[@type=’checkbox’])[last()] - Matches with the last checkbox
(//img)[1]|(//img)[last()]--lists first & last images


Xpath to CSS selector path
//input[@id=’UN’] → input #UN or #UN --- for id css path
input.UN --for class attribute
//a → a
//table/tbody → table>tbody
//table//td → table td
//*[@id=’UN’] → #UN
//*[@class=’UN’] → .UN

XPath & Css difference
In ‘cssSelector’ we can’t identify the element using its text and cssSelector do not support backward traversing. We can’t use independent dependent concept.
//table/.. → Not possible
//a[text()=’abc’] → Not possible

To get Textbox value
WebElement tv=driver.findElement(By.id("t3")); 
String printText=tv.getAttribute("value");

To delete textbox content
ele.sendKeys(Keys.CONTROL + "a");
ele.sendKeys(Keys.DELETE);

To execute exe file
Runtime.getRuntime().exec("C:/Windows/system32/calc.exe");

TO delete All cookies
driver.manage().deleteAllCookies();

Dimensions 
Dimension ele1=ele.getSize();--to get height and width

Points
Points P=ele.getLocation();--to get coordinates(x,y)

getCssValue("color")

getCssValue("font-size")

Attributes used for Webelement
i.  clear()
ii. click()
iii. getAttribute()
iv. getCssValue()
v. getLocation()
vi. getSize()
vii. getText()
viii. isDisplayed()
ix. isEnabled()
x. isSelected()
xi. sendkeys()
xii. submit()


JavaScript Executer code to click
String c="document.getElementById('loginButton').click()"; 
r.executeScript(c);

JavaScript Executer code to enter text in textbox
String c="document.getElementById('username').value='admin'";

JavaScript Executer code to empty text in textbox
String c="document.getElementById('username').value=''";

To Scroll to axis
String s="window.scrollTo(0,"+y+")"; r.executeScript(s);

Screenshot code
EventFiringWebDriver fire= new EventFiringWebDriver(web);
		
		File f=fire.getScreenshotAs(OutputType.FILE);
		
		File g= new File("C:\\Hemanth\\Eclipse\\Automation\\Screenshots\\image.png");
		
		FileUtils.copyFile(f, g);

Select 
Select select=new Select(listBox);
boolean v = select.isMultiple();

1. selectByVisibleText(str) > takes string argument
2. selectByIndex(int) > takes integer argument
3. selectByValue(str) > takes string argument


Deselect is used only for multiple select option


*If we add duplicate element in set it returns false
if(allText.add(text)==false)
{
System.out.println(text); //print duplicate
}


*contextclick, Drag & Drop, DoubleClick belongs lo actions class

*Hiding the data and binding with methods is called as Encapsulation

*POM is one of the java designing pattern to develop and test webpage.

*Encapsulation can be achieved through PageObjectModel(POM)

* Object Repository It is the location where we store the objects(elements)

* Page Object Repository It is the location where we store the elements present on the page

Limitations of FindBy
We cannot use variables in place of locatorvalue in the FindBy Annotation

TestNG--Test Next Generation
It is unit testing framework. Basically TestNG is used by developers to perform unit testing and it is also 
used in selenium to perform BlackBox testing.

- Run multiple test classes 
- Generate Reports 
- Rerun only failed classes etc

- While creating TestNG class we should not use
i. Default package 
ii. No main() method 
iii. No System.out.println

*Reporter.log("Welcome to testNG", true);--reporter class is used instead of println

*Failed testcases are runned using TestNG-Failed.xml file present in test-output folder

*Test methods runs based on the alphabetical order

*If the priority is duplicate then those methods will be executed in alphabetical order.(priority default is 0)

*We can specify –ve value for priority and it will execute them in ascending order.(-n,-4,----,-1)

*Using invocationCount we can run a test method multiple times, default invocationCount is 1

@Test – this indicates test method.
@BeforeMethod – this method will be executed before the execution of every test methods.
@AfterMethod – this method is executed after execution of every method
@BeforeClass – this method is executed only once at the beginning of the class
@AfterClass – this method is executed only once at the end of the class

*dependsonMethods option is for the method depends on another

*If both primary and dependency are specified which one will be used?
Ans: dependency

*All methods in Assert class are static, if we want to execute after fail also then we need to use softassert(all methods are not static )
*SoftAssert ass= new SoftAssert();
*To update status of the comparison into the result window we should use assertAll() method. 
*Any statement after assertAll() method will not be executed if comparison fails

Based on the design framework is catogarized into following types:
1. Method-driven Automation Framework 
2. Data-driven Automation Framework 
3. Module-driven Automation framework 
4. Keyword-driven Automation framework 
5. Hybrid Automation Framework 


*Frames web.switchTo().defaultContent() or parentframe; ---to come to main page
*If page is refreashed then control goes to main page from frame

*Executing the script by calling the methods present in the frameworks is called as ‘Method Driven Framework’.

*Jar files required for data driven framework
1. poi-3.13-20150929 
2. poi-ooxml-3.13-20150929 
3. poi-ooxml-schemas-3.13-20150929 
4. xmlbeans-2.6.0 

poi-4.1.2.jar poi-ooxml-4.1.2.jar poi-ooxml-schemas-4.1.2.jar xmlbeans-3.1.0.jar for perfect excel jar files

*getLastRowNum() method which returns the index of the last row.

*getLastCellNum() method which returns the count and not the index.

Parameter code
*public void test(XmlTest c)--in method parameter
*c.getAllParameters();---methods will be available

Selenium Grid
To run automation scripts on multiple browsers on multiple environments (remote computers) we can use Selenium Grid.

In Selenium Grid, we will have two types of systems:
1. Hub – it is the computer where framework is present and we start the execution from this
computer, after the execution result is also stored in this system. Selenium grid has only 
one Hub.

2. Node – Node refers to remote computer on which actual execution happens. In Selenium grid
there could be one or more node communicating with the hub . To implement this concept, we 
should perform following steps 
a. Start the hub 
b. Start the node 
c. Execute Framework using RemoteWebDriver.


Jenkins Process
*Tester stores the code in TestScript Repository and developers in Software configuration management

1. Every day automation engineers will convert manual testcases into Automation scripts and store 
them in TSR. 
2. Developer writes code in their local system and stores them in SCM and it is detected by Jenkins 
which will creates a build and installs it in Build Server. 
3. After installing the build and it will execute the batch file.
4. Batch file will execute TestNg suite file (testng.xml).

*The framework is developed using TestNG, POM and Exel libraty. It is a combination of Data-Driven 
and Method-Driver framework, which we call it as Hybrid Framework.

With respect to Selenium we can categorize the popup into following types:
1. Hidden Division Popup(Calender popup in website)
2. Alert and Confirmation Popup(Using Alert class we can accept or dismiss the alert)
3. File Upload Popup (To upload file using send keys)
4. File Download Popup (To download file)
5. Child Browser Popup (Mutilple child window handling)
6. Window Popup()










		









